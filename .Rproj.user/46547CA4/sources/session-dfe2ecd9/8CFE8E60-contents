#Script manipulacion de datos de porblem set 3

#FIjamos directorio
setwd(substr(getwd(), 1, nchar(getwd()) - 8))

#limpiar entorno
rm(list = ls())

#librerias
library(rio)
library(tidyverse)
require(sf)
require(leaflet)
require(osmdata)
library(raster)
library(stringr)

##importamos datos de entrenamiento y pruebas
train_su<-import('Stores/inputs/train.csv')
test_su<-import('Stores/inputs/test.csv')

#Importamos información adicional (estrato, localidad)
manzanas_estr<-st_read("Stores/inputs/manz_estrato/ManzanaEstratificacion.shp")
localidades<- st_read("Stores/inputs/loca/Loca.shp")
sitp<- st_read("Stores/inputs/psitp/PSITP.shp")
delitos<-st_read("Stores/inputs/dai/DAILoc.shp")
restbar<-st_read("Stores/inputs/egba/EGBA.shp")
cicloruta<-st_read("Stores/inputs/ciclorruta/ciclorruta.shp")
manzanas_aval<-st_read("Stores/inputs/avaluo_manz/Avaluo_Manzana.shp")
sector<-st_read("Stores/inputs/sector/SECTOR.shp")

#Convertirmos los dataframe a tipo de datos espacial (sf)
convert_dfsf<-function(datos){
  
  datos_sf <- st_as_sf(datos, coords = c("lon", "lat"), crs = 4326)
  
  return(datos_sf)
  
}

train_sf<-convert_dfsf(train_su)
test_sf<-convert_dfsf(test_su)

## Asegurarnos de que tenga el mismo sistema de cordanas
manzanas_estr <- st_transform(manzanas_estr, st_crs(train_sf))

###Asignamos estrato 
sf_use_s2(FALSE) ### Linea necesaria pára correr el codigo

st_nearest_feature(train_sf, manzanas_estr)

#Asignación de estrato
train_sf<-st_join(train_sf, manzanas_estr, join = st_nearest_feature)
test_sf<-st_join(test_sf, manzanas_estr, join = st_nearest_feature)


##Ejemmplo con la oobservacion 1
leaflet() %>%
  addTiles() %>%
  addCircles(data = train_sf[1,])  %>% 
  addPolygons(data = manzanas_estr[3408,])

##Ejemmplo con todas las obs
leaflet() %>%
  addTiles() %>%
  addCircles(data = train_sf)  

#Asignamos localidad

#agisnamos mismo sistema de cordenadas
localidades <- st_transform(localidades, st_crs(train_sf))
with<-st_within(x=train_sf,y=localidades)

#Se realiza el pegue para conocer la localidad a la que pertence cada propiedad
train_sf<-st_join(train_sf, localidades, join = st_within)
test_sf<-st_join(test_sf, localidades, join = st_within)

### Distancia al centro comercial mas cercano
# available_tags("shop") correr esta linea para ver tags

obtener_osmdata<-function(llave, valor, tipo_dato){
  
  ### Utilizamoas osm para bogota
  data <- opq(bbox = getbb("Bogotá Colombia")) %>%
    add_osm_feature(key = llave , value = valor)
  
  # cambios el tipo de objeto
  data<- osmdata_sf(data)
  
  # dejamos poligonos y name y id
  
  if (tipo_dato=='linea'){
    
    data <- data$osm_lines %>% 
      dplyr::select(osm_id, name) 
    
  }
  
  else if (tipo_dato=='puntos'){
    
    data <- data$osm_points %>% 
      dplyr::select(osm_id, name) 
    
  }
  
  else if (tipo_dato=='poligono'){
    
    data <- data$osm_polygons %>% 
      dplyr::select(osm_id, name) 
    
  }
  
  # Convertimos a tipo de objeto sf
  data<-st_as_sf(data)
  

  return(data)
  
}

malls<- obtener_osmdata('shop', 'mall', 'poligono')

## Creamos funcion que calculo la distancia al poligono mas cercano
distneastfeat<-function(data_original, data_feat, n_variable, tipo_dato){
  
  ##Calculamos centroides si poligono
  
  if (tipo_dato=='poligono'){
  
  data_feat <- st_centroid(data_feat, byid = T)
  
  }
  
  else{
    NA
  }
  ##Calculamos distancias
  dist_matrix <- st_distance(x = data_original, y = data_feat)
  
  #Distancia minima
  dist_min <- apply(dist_matrix, 1, min)  
  
  data_original[,n_variable]<-dist_min 
  
  return(data_original)
}

#Añadimos cc mas cercanos a trains y test
train_sf<-distneastfeat(train_sf, malls, 'distcc_nearest', 'poligono')
test_sf<-distneastfeat(test_sf, malls, 'distcc_nearest', 'poligono')

### Distancia al parque mas cercano
#añadir distancia a parques
parques<- obtener_osmdata('leisure', 'park', 'poligono')

#añadir distancia a parques para train y test
# Este codigo se demora un poco
train_sf<-distneastfeat(train_sf, parques, 'distpark_nearest', 'poligono')
test_sf<-distneastfeat(test_sf, parques, 'distpark_nearest', 'poligono')

# Eesaciones de transmilenio
#IMportamos datos publicos
transmi <- st_read('https://gis.transmilenio.gov.co/arcgis/services/Troncal/consulta_estaciones_troncales/MapServer/WFSServer?request=GetCapabilities&service=WFS')

#Eliminamos variable shape (cordenadas raras)
transmi<- as.data.frame(transmi) %>% dplyr::select(-shape)

#Creamos sf con cordenadas convencionales.
transmi <- st_as_sf(transmi, coords = c("LONGITUD", "LATITUD"), crs = 4326)

##creamos la dinstancia mas ala estación mas cercana
train_sf<-distneastfeat(train_sf, transmi, 'disttransmi_nearest','punto')
test_sf<-distneastfeat(test_sf, transmi, 'disttransmi_nearest', 'punto')

#### Realizamos el mismo proceso con  SITP
sitp <- st_transform(sitp, st_crs(train_sf))

### ahora asignamos la distancia a la parada mas cercana
train_sf<-distneastfeat(train_sf, sitp, 'distsitp_nearest','punto')
test_sf<-distneastfeat(test_sf, sitp, 'distsitp_nearest', 'punto')

### ahora queremos añadir delitos
vars_to_remove <- grep("TOT|VAR|22|18|24|23", names(delitos))
delitos <- delitos[, -vars_to_remove]

#Hacemos rename 
patrones <- c('CMLP', 'CMHP', 'CMHR', 'CMHA', 'CMHB', 'CMHCE', 'CMHM', 'CMDS', 'CMVI')
reemplazos <- c("lesionesperson", "hurtopersonas", 'hurtosresidencias', 'hurtosautos', 'hurtosbicis',  'hurtoscel', 'hurtosmotos', 'delitos_sexual', 'violencia_intra')

# Reemplazar los nombres de las variables
nombres_n <- str_replace_all(names(delitos), setNames(reemplazos, patrones))
nombres_n <- gsub("CMHC", "hurtoscomercio", nombres_n) 
nombres_n <- gsub("CMH", "homicidios", nombres_n)   
colnames(delitos)<-nombres_n

# Calculamos promedio para los año de venta de  las proepiedades 2019, 2020, 2022as
delitos<-as.data.frame(delitos)

delitos <- delitos %>%
  mutate(n_homicidios = rowMeans(dplyr::select(., starts_with("homicidios"))),
         n_lesiones = rowMeans(dplyr::select(., starts_with("lesionesperson"))),
         n_hurtopersonas = rowMeans(dplyr::select(., starts_with("hurtopersonas"))),
         n_hurtosautos=rowMeans(dplyr::select(., starts_with("hurtosautos"))),
         n_hurtosresidencias=rowMeans(dplyr::select(., starts_with("hurtosresidencias"))),
         n_hurtosbicis=rowMeans(dplyr::select(., starts_with("hurtosbicis"))),
         n_hurtosmotos=rowMeans(dplyr::select(., starts_with("hurtosmotos"))),
         n_hurtoscomercio=rowMeans(dplyr::select(., starts_with("hurtoscomercio"))),
         n_hurtoscelular=rowMeans(dplyr::select(., starts_with("hurtoscel"))),
         n_delitossexales=rowMeans(dplyr::select(., starts_with("delitos_sexual"))),
         n_violenciaintra=rowMeans(dplyr::select(., starts_with("violencia_intra"))))

# Nos quedamos con los promedios e identificador (localidad) y Quitamos las tildes a la variable localidad
delitos <-delitos %>% rename('n_localidad'='CMIULOCAL','localidad'='CMNOMLOCAL')  %>%
          dplyr::select(localidad,starts_with("n_"))  %>% 
          mutate(localidad=chartr("áéíóúÁÉÍÓÚ", "aeiouAEIOU", localidad)) %>%
          mutate(localidad=tolower(localidad))

## Rename para las bases de train y test para localidad y pasar a minuscula
train_sf <- train_sf %>% rename('localidad'='LocNombre')  %>%
            mutate(localidad=tolower(localidad))


test_sf <- test_sf %>% rename('localidad'='LocNombre') %>%
           mutate(localidad=tolower(localidad))

#realizamos un merge

train_sf<-left_join(x=train_sf,y=delitos, by='localidad')
test_sf<-left_join(x=test_sf,y=delitos, by='localidad')

#### Distanicia a resturante bar mas cercano
# cofiguracion de cordeandas
restbar<-as.data.frame(restbar)
restbar <- st_as_sf(restbar, coords = c("Long_Aprox", "Lat_Aprox"), crs = 4326)
# calculo distancia
train_sf<-distneastfeat(train_sf, restbar, 'distrestbar_nearest','punto')
test_sf<-distneastfeat(test_sf, restbar, 'distrestbar_nearest', 'punto')

#### distancia avenidas princiaples

#Primary (casi todas las avenidas principales)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")

##Trunk (avenida caracas, NQS y automista norte y sur)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")

#Creamos un dataframe unificado
primary<- rbind(primary, trunk)

## Añadimos distancias a la avenida prinipal mas cercana
train_sf<-distneastfeat(train_sf, primary, 'distprimary_nearest','punto')
test_sf<-distneastfeat(test_sf, primary, 'distrprimary_nearest', 'punto')


### Ciclovia mas cercana
cicloruta <- st_transform(cicloruta, st_crs(train_sf))
cicloruta <- st_cast(cicloruta, "POINT")

#Funcion para distancia minima

dist_minpoints<-function(data_orginial,ext_points){
  
  minimos<-c()
  
  for (i in 1:nrow(data_orginial)){
    
    vector_dist<-st_distance(data_orginial[i,],ext_points)
    min<-min(vector_dist)
    
    minimos<-c(minimos,min)
    print(minimos)
    
    rm(vector_dist)
    
  }
  
  return(minimos)
}

#Creamos  las variables (este codigo se demora mucho)
trainciclodist<-dist_minpoints(train_sf,cicloruta)
testciclodist<-dist_minpoints(test_sf,cicloruta)

#Asignamos las variables al dataframe
train_sf$distciclo_nearest<-trainciclodist
test_sf$distciclo_nearest<-testciclodist

### Avaluo catastral manzana de la manzana
manzanas_aval <- st_transform(manzanas_aval, st_crs(train_sf))

#Asignación avaluo de manzana
train_sf<-st_join(train_sf, manzanas_aval , join = st_nearest_feature)
test_sf<-st_join(test_sf, manzanas_aval , join = st_nearest_feature)

#configuración de cordeanas
sector <- st_transform(sector, st_crs(train_sf))
#asginacion de secor
train_sf<-st_join(train_sf, sector , join = st_within)
test_sf<-st_join(test_sf, sector , join = st_within)

#Exportamos base de datos
export(train_sf, 'Stores/outputs/train_geo.rds')
export(test_sf, 'Stores/outputs/test_geo.rds')

#Limpaimos entorno
rm(list = ls())

#imprtamos datos
train<-import('Stores/outputs/train_geo.rds')
test<-import('Stores/outputs/test_geo.rds')

#Borramos variables innecesarias train

train<- train %>% dplyr::select(-OBJECTID.x,
                         -CODIGO_MAN,
                         -CODIGO_CRI, 
                         -NORMATIVA,
                         -ACTO_ADMIN,
                         -NUMERO_ACT,
                         -ESCALA_CAP,
                         -FECHA_CAPT,
                         -FECHA_ACTO,
                         -SHAPE_AREA,
                         -SHAPE_LEN,
                         -SHAPE_Leng.x,
                         -SHAPE_Area.x,
                         -SHAPE_Leng.y,
                         -SHAPE_LEN,
                         -SHAPE_Area,
                         -SCATIPO,
                         -SCACODIGO,
                         -GLOBALID,
                         -OBSERVACIO, 
                         -LocAAdmini, 
                         -LocArea,
                         -LocCodigo,
                         -SHAPE_Leng,
                         -SHAPE_Area.y,
                         -CP_TERR_AR,
                         -GRUPOP_TER,
                         -RESPONSABL,
                         -CODIGO_ZON,
                         -MANZANA_ID,
                         -OBJECTID.y)

#Borramos variables innecesarias test

test<- test %>% dplyr::select(-OBJECTID.x,
                                -CODIGO_MAN,
                                -CODIGO_CRI, 
                                -NORMATIVA,
                                -ACTO_ADMIN,
                                -NUMERO_ACT,
                                -ESCALA_CAP,
                                -FECHA_CAPT,
                                -FECHA_ACTO,
                                -SHAPE_AREA,
                                -SHAPE_LEN,
                                -SHAPE_Leng.x,
                                -SHAPE_Area.x,
                                -SHAPE_Leng.y,
                                -SHAPE_LEN,
                                -SHAPE_Area,
                                -SCATIPO,
                                -SCACODIGO,
                                -GLOBALID,
                                -OBSERVACIO, 
                                -LocAAdmini, 
                                -LocArea,
                                -LocCodigo,
                                -SHAPE_Leng,
                                -SHAPE_Area.y,
                                -CP_TERR_AR,
                                -GRUPOP_TER,
                                -RESPONSABL,
                                -CODIGO_ZON,
                                -MANZANA_ID,
                                -OBJECTID.y)

## Cambiamos nombres de algunas variables

train<- train  %>% rename('avaluo_comercialmanz'='AVALUO_COM', 
                          'avaluo_catastromanz'='AVALUO_CAT',
                          'nombre_sector'='SCANOMBRE',
                          'n_delitossexuales'='n_delitossexales')

test<- test  %>% rename('avaluo_comercialmanz'='AVALUO_COM', 
                          'avaluo_catastromanz'='AVALUO_CAT',
                          'nombre_sector'='SCANOMBRE',
                          'n_delitossexuales'='n_delitossexales')


###Wquitamos descripcion y tituulos

train<- train  %>% dplyr::select(-description, -title)

test<- test  %>% dplyr::select(-description, -title)
#Exportamos ya base limpia
export(train, 'Stores/outputs/train_geo.rds')
export(test, 'Stores/outputs/test_geo.rds')

#Prueba exportacion
pruebatrain<-import('Stores/outputs/train_geo.rds')


##Para observar objetos nuevos
leaflet() %>%
  addTiles() %>%
  addPolygons(data = sector)  




